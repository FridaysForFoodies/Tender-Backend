# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

"""The Example model"""
type Example {
  description: String!
  id: ID!
  name: String!
}

"""A single ingredient for a recipe"""
type Ingredient {
  calories: Float!

  """
  The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
  """
  ID: Float!
  name: String!
  searchCount: Float!
  unit: Unit!
}

type Mutation {
  createCategory(description: String!, name: String!): Boolean!
}

type Query {
  generateUser: User!
  ingredientSuggestions(count: Float = 5, query: String!): [Ingredient!]
  popularIngredients(count: Float = 5): [Ingredient!]!
  returnAllExamples: [Example!]!
  returnExample(id: Float!): Example!
}

"""The unit for ingredient amounts"""
type Unit {
  abbreviation: String!

  """
  The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
  """
  ID: Float!
  name: String!
}

type User {
  uuid: ID!
}
